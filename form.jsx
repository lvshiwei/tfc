/**
 * @overview A form component generated by tfc.
 * @author your.name@corp.com
 */

import React from "react";
import classnames from "classnames";
import schema from "./schema";
import { useModel, useValidation } from "./hooks";
import { Card, List, InputItem, Picker, DatePicker } from "antd-mobile";

/**
 * Constants for select
 */
const YESNO_OPTIONS = [
  { label: "是", value: 1 },
  { label: "否", value: 2 },
];

/**
 * Say something to avoid warnning from eslint
 */
export default function () {
  const [model, setModel] = useModel({ preOpeningTime: new Date() });
  const [validate, errors] = useValidation(schema);

  const handleSubmit = () =>
    validate(model)
      .then(() => alert("Amazing!!"))
      .catch(console.error);

  const handleInputChange = (name) => (value) => setModel(name, value);
  const handleLeaveInput = (name) => () => validate(name, model[name]);
  const handleSelectChange = (name) => (value) => {
    setModel(name, value);
    validate(name, value);
  };
  const renderClassName = (name, properties) =>
    classnames(...(properties || []), {
      error: Array.isArray(errors) && errors.some((e) => e.path === name),
      hasValue: !(model[name] === null || typeof model[name] === "undefined"),
    });

  const Required = () => <i className="required">*</i>;

  return (
    <div className="form">
      {model.auditState === 0 && (
        <section className="section-0">
          <Card className="rejected">
            <Card.Body>
              <div>驳回原因: {model.rejectReason}</div>
            </Card.Body>
          </Card>
        </section>
      )}

      <section className="section-1">
        <List>
          <List.Item
            extra={model.cityName}
            className="padding-right-24 hasValue"
          >
            城市
          </List.Item>
          <List.Item
            extra={model.shopNcCode}
            className="padding-right-24 flex-3vs7 hasValue"
          >
            门店序号
          </List.Item>
          <List.Item
            extra={model.shopName}
            className="padding-right-24 hasValue"
          >
            门店名称
          </List.Item>
          <InputItem
            placeholder="请输入展示给顾客的门店地址"
            maxLength="100"
            value={model.shopLocation}
            onChange={handleInputChange("shopLocation")}
            onBlur={handleLeaveInput("shopLocation")}
            className={renderClassName("shopLocation")}
          ></InputItem>
          <InputItem
            placeholder="请输入楼层位置"
            maxLength="5"
            value={model.floorLocation}
            onChange={handleInputChange("floorLocation")}
            onBlur={handleLeaveInput("floorLocation")}
            className={renderClassName("floorLocation")}
          >
            楼层位置
          </InputItem>
        </List>
      </section>

      <section className="section-2">
        <List>
          <DatePicker
            mode="date"
            title="请选择预计开业日期"
            value={model.preOpeningTime}
            onChange={handleSelectChange("preOpeningTime")}
          >
            <List.Item
              arrow="horizontal"
              className={renderClassName("preOpeningTime")}
            >
              请选择预计开业日期 <Required />
            </List.Item>
          </DatePicker>
          <Picker
            cols="1"
            data={YESNO_OPTIONS}
            value={model.isSupportCanteen}
            onChange={handleSelectChange("isSupportCanteen")}
          >
            <List.Item
              arrow="horizontal"
              className={renderClassName("isSupportCanteen")}
            >
              是否支持堂食 <Required />
            </List.Item>
          </Picker>
        </List>
      </section>

      <section className="foot">
        <Button type="primary" onClick={handleSubmit}>
          提交
        </Button>
      </section>
    </div>
  );
}
